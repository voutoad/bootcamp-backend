basePath: /api/v1
definitions:
  dto.CreateUserDTO:
    properties:
      age:
        maximum: 100
        minimum: 0
        type: integer
      description:
        maxLength: 100
        minLength: 2
        type: string
      image_url:
        type: string
      interests:
        maxLength: 100
        minLength: 2
        type: string
      password:
        maxLength: 100
        minLength: 8
        type: string
      rating:
        maximum: 100
        minimum: 0
        type: integer
      type:
        maxLength: 100
        minLength: 2
        type: string
      username:
        maxLength: 100
        minLength: 2
        type: string
    required:
    - age
    - description
    - interests
    - password
    - rating
    - type
    - username
    type: object
  dto.UserResponseDTO:
    properties:
      age:
        type: integer
      description:
        type: string
      image_url:
        type: string
      interests:
        type: string
      rating:
        type: integer
      tags:
        type: string
      type:
        type: string
      username:
        type: string
    type: object
  dto.UserUpdateDTO:
    properties:
      tags:
        maxLength: 100
        minLength: 4
        type: string
      username:
        maxLength: 100
        minLength: 2
        type: string
    required:
    - tags
    - username
    type: object
host: localhost:5000
info:
  contact: {}
  description: Simple backend for PickMe product
  title: PickMe API
  version: "1.0"
paths:
  /users:
    get:
      description: Get user with optional filters
      parameters:
      - description: Type
        in: query
        name: type
        required: true
        type: string
      - description: Tag
        in: query
        name: tag
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.UserResponseDTO'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Get users
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: Updating user tags with given username and tags
      parameters:
      - description: User Update
        in: body
        name: userUpdate
        required: true
        schema:
          $ref: '#/definitions/dto.UserUpdateDTO'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Update user tags
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user with given body
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.UserResponseDTO'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Create user
      tags:
      - users
  /users/{username}:
    get:
      description: Get user with given username or get a 404 error
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponseDTO'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Get user by his username
      tags:
      - users
swagger: "2.0"
